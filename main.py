import os
import json
import random
import discord
from discord.ext import commands
import wavelink
import asyncio
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Get token from environment variable
TOKEN = os.getenv("DISCORD_TOKEN") or os.getenv("TOKEN")
if not TOKEN:
    logger.error("Discord token not found in environment variables!")
    exit(1)

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

RANK_FILE = "rank.json"

# Initialize rank file
def init_rank_file():
    if not os.path.exists(RANK_FILE):
        try:
            with open(RANK_FILE, "w") as f:
                json.dump({}, f)
        except Exception as e:
            logger.error(f"Failed to create rank file: {e}")

def load_rank():
    try:
        with open(RANK_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        logger.warning("Rank file not found or corrupted, creating new one")
        init_rank_file()
        return {}

def save_rank(rank):
    try:
        with open(RANK_FILE, "w") as f:
            json.dump(rank, f, indent=2)
    except Exception as e:
        logger.error(f"Failed to save rank file: {e}")

# Initialize rank file on startup
init_rank_file()

# ---------- Music Node Setup ----------
@bot.event
async def on_ready():
    logger.info(f"Bot {bot.user} is ready!")
    
    # Initialize music functionality (optional - bot works perfectly without it)
    logger.info("üéØ Discord Bot fully operational!")
    logger.info("üí° Features available: AI chat, XP/rank system, roles, announcements, private rooms")
    logger.info("üéµ Music system: Available for future enhancement with Lavalink")

# ---------- 1. Music Commands ----------
@bot.command()
async def join(ctx):
    """Join the voice channel"""
    if ctx.author.voice and ctx.author.voice.channel:
        try:
            await ctx.author.voice.channel.connect()
            await ctx.send(f"üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö {ctx.author.voice.channel.name}")
        except Exception as e:
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: {e}")
            logger.error(f"Failed to join voice channel: {e}")
    else:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!")

@bot.command()
async def leave(ctx):
    """Leave the voice channel"""
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        await ctx.send("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß!")
    else:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")

@bot.command()
async def play(ctx, *, search: str):
    """Play music from YouTube (feature in development)"""
    embed = discord.Embed(
        title="üéµ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏•‡∏á",
        description="‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏•‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï",
        color=discord.Color.blue()
    )
    embed.add_field(
        name="üéØ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
        value="```!ai - ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö AI\n!rank - ‡∏î‡∏π XP\n!leaderboard - ‡∏î‡∏π‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö\n!emoji - ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°\n!announce - ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®\n!pinhelp - ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠```",
        inline=False
    )
    await ctx.send(embed=embed)

    vc: wavelink.Player = ctx.voice_client
    if not vc:
        if ctx.author.voice:
            try:
                vc = await ctx.author.voice.channel.connect(cls=wavelink.Player)
                await ctx.send(f"üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö {ctx.author.voice.channel.name}")
            except Exception as e:
                await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: {e}")
                return
        else:
            await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!")
            return

    try:
        # Search for tracks
        tracks = await wavelink.YouTubeTrack.search(search)
        if not tracks:
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤!")
            return

        track = tracks[0]
        await vc.play(track)

        # Create embed for now playing
        embed = discord.Embed(
            title="üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô",
            description=f"**{track.title}**",
            color=discord.Color.green()
        )
        
        if hasattr(track, 'author') and track.author:
            embed.add_field(name="‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô", value=track.author, inline=True)
        
        if hasattr(track, 'duration') and track.duration:
            minutes, seconds = divmod(track.duration // 1000, 60)
            embed.add_field(name="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß", value=f"{minutes:02d}:{seconds:02d}", inline=True)

        await ctx.send(embed=embed)

    except Exception as e:
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á: {e}")
        logger.error(f"Play error: {e}")

@bot.command()
async def stop(ctx):
    """Stop music playback"""
    vc: wavelink.Player = ctx.voice_client
    if not vc:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        return
    await vc.stop()
    await ctx.send("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß")

@bot.command()
async def pause(ctx):
    """Pause music playback"""
    vc: wavelink.Player = ctx.voice_client
    if not vc:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        return
    await vc.pause(True)
    await ctx.send("‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß")

@bot.command()
async def resume(ctx):
    """Resume music playback"""
    vc: wavelink.Player = ctx.voice_client
    if not vc:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        return
    await vc.pause(False)
    await ctx.send("‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠")

@bot.command()
async def skip(ctx):
    """Skip current track"""
    vc: wavelink.Player = ctx.voice_client
    if not vc:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        return
    await vc.stop()
    await ctx.send("‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß")

@bot.command()
async def lavalink_status(ctx):
    """Check Lavalink server status"""
    if not wavelink.Pool.nodes:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Lavalink server ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠!")
        return
    
    embed = discord.Embed(
        title="üîó Lavalink Server Status",
        color=discord.Color.green()
    )
    
    for node in wavelink.Pool.nodes.values():
        status = "üü¢ Online" if node.connected else "üî¥ Offline"
        embed.add_field(
            name=f"Server: {node.identifier}",
            value=f"Status: {status}",
            inline=False
        )
    
    await ctx.send(embed=embed)

# ---------- 2. AI Chat ----------
@bot.command()
async def ai(ctx, *, question=None):
    """Chat with AI bot"""
    RESPONSES = [
        "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡πà‡∏¢ üòä", "‡∏™‡∏π‡πâ‡πÜ ‡∏ô‡∏∞!", "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡πá‡∏ö‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
        "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô!", "‡∏£‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠!", "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì!",
        "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°?", "‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞!", "‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏´‡∏°?",
        "‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ô‡∏∞", "‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏•‡∏¢!", "‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠!",
        "‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢", "‡∏â‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏±‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠", "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?"
    ]
    
    if not question:
        await ctx.send("ü§ñ ‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢~")
    else:
        response = random.choice(RESPONSES)
        await ctx.send(f"ü§ñ {response}")

# ---------- 3. Rank/Level System ----------
@bot.command()
async def addxp(ctx, user: discord.Member, xp: int):
    """Add XP to a user"""
    if not ctx.author.guild_permissions.manage_roles:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!")
        return
    
    rank = load_rank()
    uid = str(user.id)
    rank[uid] = rank.get(uid, 0) + xp
    save_rank(rank)
    
    total_xp = rank[uid]
    level = total_xp // 100
    
    embed = discord.Embed(
        title="‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° XP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description=f"{user.display_name} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö XP ‡πÄ‡∏û‡∏¥‡πà‡∏° {xp}!",
        color=discord.Color.gold()
    )
    embed.add_field(name="XP ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=total_xp, inline=True)
    embed.add_field(name="Level", value=level, inline=True)
    
    await ctx.send(embed=embed)

@bot.command()
async def rank(ctx, user: discord.Member = None):
    """Check user's rank and XP"""
    rank = load_rank()
    user = user or ctx.author
    uid = str(user.id)
    xp = rank.get(uid, 0)
    level = xp // 100
    
    embed = discord.Embed(
        title="üèÜ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=user.avatar.url if user.avatar else None)
    embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", value=user.display_name, inline=True)
    embed.add_field(name="XP", value=xp, inline=True)
    embed.add_field(name="Level", value=level, inline=True)
    
    await ctx.send(embed=embed)

@bot.command()
async def leaderboard(ctx):
    """Show top 10 users by XP"""
    rank = load_rank()
    if not rank:
        await ctx.send("üìä ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• XP ‡∏Ç‡∏≠‡∏á‡πÉ‡∏Ñ‡∏£‡πÄ‡∏•‡∏¢!")
        return

    sorted_users = sorted(rank.items(), key=lambda x: x[1], reverse=True)[:10]
    
    embed = discord.Embed(
        title="üèÜ Leaderboard Top 10",
        color=discord.Color.gold()
    )
    
    description = ""
    for i, (user_id, xp) in enumerate(sorted_users, 1):
        try:
            user = bot.get_user(int(user_id))
            name = user.display_name if user else f"User {user_id}"
            level = xp // 100
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            description += f"{medal} {name} - XP: {xp} | Level: {level}\n"
        except:
            continue
    
    embed.description = description
    await ctx.send(embed=embed)

# ---------- 4. Anti-Spam System ----------
last_message = {}

@bot.event
async def on_message(message):
    """Handle message events for anti-spam and auto XP"""
    if message.author.bot:
        return

    channel_id = message.channel.id
    user_id = message.author.id

    # Anti-spam check
    if channel_id not in last_message:
        last_message[channel_id] = {}

    last = last_message[channel_id].get(user_id, "")
    if message.content == last and len(message.content) > 5:
        try:
            await message.delete()
            warning = await message.channel.send(
                f"‚ö†Ô∏è {message.author.mention} ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡πÅ‡∏õ‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏ô‡∏∞!"
            )
            await asyncio.sleep(5)
            await warning.delete()
        except discord.errors.NotFound:
            pass
        except Exception as e:
            logger.error(f"Anti-spam error: {e}")
    else:
        last_message[channel_id][user_id] = message.content
        
        # Auto XP system (1 XP per message)
        if not message.content.startswith('!'):
            rank = load_rank()
            uid = str(user_id)
            rank[uid] = rank.get(uid, 0) + 1
            save_rank(rank)

    await bot.process_commands(message)

# ---------- 5. Emoji Decoration ----------
@bot.command()
async def emoji(ctx, *, msg: str):
    """Add random emojis to your message"""
    EMOJIS = ["‚ú®", "üî•", "üíé", "üåà", "üéâ", "‚≠ê", "üåü", "üí´", "üéä", "üéà", "ü¶Ñ", "üå∏", "üé≠", "üé™", "üé®"]
    left_emoji = random.choice(EMOJIS)
    right_emoji = random.choice(EMOJIS)
    result = f"{left_emoji} {msg} {right_emoji}"
    await ctx.send(result)

# ---------- 6. Announcement System ----------
@bot.command()
async def announce(ctx, *, msg: str):
    """Make an announcement"""
    if not ctx.author.guild_permissions.manage_messages:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!")
        return
    
    embed = discord.Embed(
        title="üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
        description=msg,
        color=discord.Color.gold()
    )
    embed.set_footer(text=f"‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢ {ctx.author.display_name}", icon_url=ctx.author.avatar.url if ctx.author.avatar else None)
    embed.timestamp = ctx.message.created_at
    
    await ctx.send(embed=embed)

# ---------- 7. Room & Role Management ----------
@bot.command()
async def create_private(ctx, *, name: str):
    """Create a private text channel"""
    if not ctx.author.guild_permissions.manage_channels:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!")
        return
    
    overwrites = {
        ctx.guild.default_role: discord.PermissionOverwrite(read_messages=False),
        ctx.author: discord.PermissionOverwrite(read_messages=True, send_messages=True)
    }
    
    try:
        channel = await ctx.guild.create_text_channel(name, overwrites=overwrites)
        await channel.send(f"üè† ‡∏´‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {ctx.author.mention}!\n‡∏û‡∏¥‡∏°‡∏û‡πå `!delete_private` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ")
        await ctx.send(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß {channel.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: {e}")

@bot.command()
async def delete_private(ctx):
    """Delete the current private channel"""
    if ctx.channel.name.startswith(ctx.author.name.lower()) or ctx.author.guild_permissions.manage_channels:
        try:
            await ctx.channel.delete()
        except Exception as e:
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: {e}")
    else:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ!")

@bot.command()
async def giverole(ctx, member: discord.Member, *, role_name: str):
    """Give a role to a member"""
    if not ctx.author.guild_permissions.manage_roles:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!")
        return
    
    try:
        role = discord.utils.get(ctx.guild.roles, name=role_name)
        if not role:
            role = await ctx.guild.create_role(name=role_name, colour=discord.Colour.random())
        
        await member.add_roles(role)
        
        embed = discord.Embed(
            title="üëë ‡∏°‡∏≠‡∏ö‡∏¢‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            description=f"{member.mention} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏® **{role.name}** ‡πÅ‡∏•‡πâ‡∏ß!",
            color=role.color
        )
        await ctx.send(embed=embed)
        
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏¢‡∏®‡πÑ‡∏î‡πâ: {e}")

# ---------- 8. Logging System ----------
@bot.event
async def on_command(ctx):
    """Log command usage"""
    logger.info(f"Command: {ctx.command} by {ctx.author} in {ctx.channel}")
    try:
        with open("self_improve.log", "a", encoding="utf-8") as f:
            f.write(f"[{ctx.message.created_at}] {ctx.author} used {ctx.command} in {ctx.channel}\n")
    except Exception as e:
        logger.error(f"Log error: {e}")

# ---------- 9. AI Suggestions ----------
@bot.command()
async def upgrade_ai(ctx):
    """Get AI suggestions for bot improvements"""
    suggestions = [
        "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° mini-game ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü",
        "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡∏î‡∏π‡∏• AI Chat ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢-‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡πÅ‡∏õ‡∏•/‡∏ñ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)",
        "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô event, schedule ‡∏´‡∏£‡∏∑‡∏≠ countdown",
        "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö anti-spam ‡πÉ‡∏´‡πâ‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ AI ‡∏à‡∏±‡∏ö pattern ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
        "‡πÄ‡∏Å‡πá‡∏ö log ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
        "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß",
        "‡πÉ‡∏™‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢/‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà/auto-ban",
        "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö queue ‡πÄ‡∏û‡∏•‡∏á ‡πÅ‡∏•‡∏∞ playlist",
        "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö economy ‡πÅ‡∏•‡∏∞ shop",
        "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö moderation ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        "‡∏£‡∏∞‡∏ö‡∏ö backup ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô DM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà"
    ]
    
    embed = discord.Embed(
        title="üß† AI Suggestion",
        description=random.choice(suggestions),
        color=discord.Color.blue()
    )
    await ctx.send(embed=embed)

# ---------- 10. Help System ----------
@bot.command()
async def pinhelp(ctx):
    """Pin help message with all commands"""
    embed = discord.Embed(
        title="üéâ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ",
        description="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ",
        color=discord.Color.green()
    )
    
    embed.add_field(
        name="üéµ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏•‡∏á",
        value="```!join - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á\n!leave - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á\n!play [‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á] - ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á\n!stop - ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏•‡∏á\n!pause - ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß\n!resume - ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠\n!skip - ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á\n!lavalink_status - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏•‡∏á```",
        inline=False
    )
    
    embed.add_field(
        name="ü§ñ AI & ‡∏£‡∏∞‡∏ö‡∏ö",
        value="```!ai [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] - ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö AI\n!upgrade_ai - ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÉ‡∏´‡∏°‡πà```",
        inline=False
    )
    
    embed.add_field(
        name="üèÜ ‡∏£‡∏∞‡∏ö‡∏ö XP/Rank",
        value="```!addxp @user [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô] - ‡πÄ‡∏û‡∏¥‡πà‡∏° XP\n!rank [@user] - ‡∏î‡∏π XP\n!leaderboard - ‡∏î‡∏π top 10```",
        inline=False
    )
    
    embed.add_field(
        name="üëë ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
        value="```!giverole @user [‡∏¢‡∏®] - ‡πÅ‡∏à‡∏Å‡∏¢‡∏®\n!create_private [‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á] - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n!delete_private - ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n!announce [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] - ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®```",
        inline=False
    )
    
    embed.add_field(
        name="‚ú® ‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
        value="```!emoji [‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°] - ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°\n!pinhelp - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ô‡∏µ‡πâ```",
        inline=False
    )
    
    embed.set_footer(text="Bot ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ Python + discord.py + wavelink")
    
    try:
        msg = await ctx.send(embed=embed)
        await msg.pin()
        await ctx.send("üìå ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
    except Exception as e:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡πÑ‡∏î‡πâ: {e}")

# ---------- Error Handling ----------
@bot.event
async def on_command_error(ctx, error):
    """Handle command errors"""
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö! ‡πÉ‡∏ä‡πâ `!pinhelp` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠")
    elif isinstance(error, commands.MemberNotFound):
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏!")
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!")
    elif isinstance(error, commands.BotMissingPermissions):
        await ctx.send("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ!")
    else:
        logger.error(f"Command error: {error}")
        await ctx.send("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î!")

# ---------- Keep Alive for Render ----------
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

class KeepAliveHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(b'Discord Bot is running!')
    
    def log_message(self, format, *args):
        return  # Suppress HTTP logs

def run_server():
    port = int(os.environ.get('PORT', 10000))
    try:
        server = HTTPServer(('0.0.0.0', port), KeepAliveHandler)
        logger.info(f"HTTP server running on port {port}")
        server.serve_forever()
    except OSError as e:
        if e.errno == 98:  # Address already in use
            logger.info(f"Port {port} already in use - server already running")
        else:
            logger.error(f"HTTP server error: {e}")

# Start HTTP server in a separate thread
server_thread = threading.Thread(target=run_server)
server_thread.daemon = True
server_thread.start()

# ---------- Run Bot ----------
if __name__ == "__main__":
    try:
        bot.run(TOKEN)
    except Exception as e:
        logger.error(f"Bot startup error: {e}")
        exit(1)
